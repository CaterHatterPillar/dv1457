sectionslc
Readable version of the comments describing advent.dat in advent.for.
---
advent.for

The data file contains several sections.  each begins with a line containing a number identifying the section, and ends with a line containing "-1".

Section 1: Long form descriptions.
	Each line contains a location number, a tab, and a line of text.  
	The set of (necessarily adjacent) lines whose numbers are x form the long description of location x.

Section 2: Short form descriptions.  
	Same format as long form.  not all places have short descriptions.

Section 3: Travel table.  
	Each line contains a location number (x), a second location number (y), and a list of motion numbers (see section 4).
	Each motion represents a verb which will go to y if currently at x.
	y, in turn, is interpreted as follows.  let m=y/1000, n=y mod 1000.
		if n<=300	
			It is the location to go to.
		if 300<n<=500
			n-300 is used in a computed goto to a section of special code.
		if n>500
			Message n-500 from section 6 is printed, and he stays wherever he is.
		Meanwhile, m specifies the conditions on the motion.
		if m=0
			It's unconditional.
		if 0<m<100
			It is done with m% probability.
		if m=100
			Unconditional, but forbidden to dwarves.
		if 100<m<=200
			He must be carrying object m-100.
		if 200<m<=300
			Must be carrying or in same room as m-200.
		if 300<m<=400
			prop(m mod 100) must *not* be 0.
		if 400<m<=500
			prop(m mod 100) must *not* be 1.
		if 500<m<=600
			prop(m mod 100) must *not* be 2, etc.
	If the condition (if any) is not met, then the next *different* "destination" value is used (unless it fails to meet *its* conditions, in which case the next is found, etc.).  Typically, the next dest will be for one of the same verbs, so that its only use is as the alternate destination for those verbs.  For instance:
		15	110022	29	31	34	35	23	43
		15	14	29
	This says that, from loc 15, any of the verbs 29, 31, etc., will take him to 22 if he's carrying object 10, and otherwise will go to 14.
		11	303008	49
		11	9	50
	This says that, from 11, 49 takes him to 8 unless prop(3)=0, in which case he goes to 9.  verb 50 takes him to 9 regardless of prop(3). 

Section 4: Vocabulary.  
	Each line contains a number (n), a tab, and a five-letter word.  
	Call m=n/1000.  
	if m=0
		Then the word is a motion verb for use in travelling (see section 3).  
	else, if m=1
		The word is an object.  
	else, if m=2
		The word is an action verb (such as "carry" or "attack").  
	else, if m=3
		The word is a special case verb (such as "dig") and n mod 1000 is an index into section 6.  Objects from 50 to (currently, anyway) 79 are considered treasures (for pirate, closeout).
	else if m=4
		The word is a game-command, such as look or inventory.

Section 5: Object descriptions.  
	Each line contains a number (n), a tab, and a message.  
	if n is from 1 to 100
		The message is the "inventory" message for object n.  
	otherwise
		n should be 000, 100, 200, etc., and the message should be the description of the preceding object when itsprop value is n/100. The n/100 is used only to distinguish multiple messages from multi-line messages; the prop info actually requires all messages for an object to be present and consecutive.  Properties which produce no message should be given the message ">$<".

Section 6: Arbitrary messages.  
	Same format as sections 1, 2, and 5, except the numbers bear no relation to anything (except for special verbs in section 4).

Section 7: Object locations.
	Each line contains an object number and its initial location (zero (or omitted) if none).
	If the object is immovable, the location is followed by a "-1".
	If it has two locations (e.g. the grate) the first location is followed with the second, and the object is assumed to be immovable.

Section 8: Action defaults.  
	Each line contains an "action-verb" number and the index (in section 6) of the default message for the verb.

Section 9: Liquid assets, etc.  
	Each line contains a number (n) and up to 20 location numbers.  Bit n (where 0 is the units bit) is set in cond(loc)
	For each loc given.  the cond bits currently assigned are:
		0	light
		1	if bit 2 is on: on for oil, off for water
		2	liquid asset, see bit 1
		3	pirate doesn't go here unless following player
	Other bits are used to indicate areas of interest to "hint" routines:
		4	trying to get into cave
		5	trying to catch bird
		6	trying to deal with snake
		7	lost in maze
		8	pondering dark room
		9	at witt's end
	cond(loc) is set to 2, overriding all other bits, if loc has forced motion.

Section 10: Class messages.
	Each line contains a number (n), a tab, and a message describing a classification of player.
	The scoring section selects the appropriate message, where each message is considered to apply to players whose scores are higher than the previous n but not higher than this n.  Note that these scores probably change with every modification (and particularly expansion) of the program.

Section 11: Hints.
	Each line contains a hint number (corresponding to a cond bit, see section 9), the number of turns he must be at the right loc(s) before triggering the hint, the points deducted for taking the hint, the message number (section 6) of the question, and the message number of the hint.  these values are stashed in the "hints" array. hntmax is set to the max hint number (<= hntsiz).  
	numbers 1-3 are unusable since cond bits are otherwise assigned, so 2 is used to remember if he's read the clue in the repository, and 3 is used to remember whether he asked for instructions (gets more turns, but loses points).

Section 12: Magic messages. 
	Identical to section 6 except put in a separate section for easier reference.  Magic messages are used by the startup, maintenance mode, and related routines.

Section 0: End of database.
